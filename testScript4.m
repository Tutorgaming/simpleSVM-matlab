%============
% LIBSVM-MATLAB TESTING by iTUTOR
% Version 0.3
%============
clear;
clc;

%============
% Inputs
%============

% Read the inpit data using LIBSVM-READ
% Input must be in this format 
% <class_identification> <Attribute1>:<value1> <Attribute2>:<value2> 
% . . . . . 

    [class , data_instance] = libsvmread('exampleInput');
    [N_data, N_attrib] = size(data_instance);
% Categorized the input data 
    % Training instance index selector
        trainIndex = zeros(N_data,1);
        trainIndex(1:N_data) = 1;
    
    % Actual TRAINING DATA and CLASS NAME collection by indices
    % every columns in the instance where trainIndex ==1 
    % will be marked as selected
        trainData = data_instance(trainIndex == 1 , : );
        trainLabel = class(trainIndex==1,:);
    
    %Test instance 
        testIndex = zeros(N_data,1);
        testIndex(1:N_data) = 1;
        testData = data_instance(testIndex == 1, : );
        testLabel = class(testIndex==1,:);

% Raw Data Plot 
     if(N_attrib <= 2),
        title('RAW Data')
        figure(1);
         scatter(trainData(:,1),trainData(:,2),[],trainLabel(:,1),'+','linewidth',2);
     %   gscatter(trainData(:,1),trainData(:,2),trainLabel(:,1),'rgb','osd');
        hold on;
     end
     


%============
% Processing - Classification 
%============
% ONE-ONE CLASS
    % Training with input data
%         model = svmtrain(trainLabel, trainData, '-s 0 -t 0 -c 100');
% MULTIPLE - CLASS 
    % Training with input data
      model = ovrtrain(trainLabel, trainData, '-c 100 -t 0');

% Support Vectors Generated by the model 
%         sv = model.SVs; 
        
%============
% Testing the training model 
%============ 

% ONE-ONE CLASS
%     Run the SVM model on the test data
%     [predict_label, accuracy, prob_values] = svmpredict(testLabel, testData, model, '-b 1');

%MULTIPLE - CLASS
    % [predicted_label, accuracy, decision_values]
    % [pred accuracy decv] = ovrpredict(testY, testX, model);
    
%============
% Visualization For 2-D , 3-D 
%============     
    % plot support vectors
%     plot(sv(:,1),sv(:,2),'ko', 'MarkerSize', 10);
    sv1 = model.models{1, 1}.SVs;
    sv2 = model.models{2, 1}.SVs;
    plot(sv2(:,1),sv2(:,2),'ko', 'MarkerSize', 10);
    
    
    
    
    
    
    
    
    
    
    
    